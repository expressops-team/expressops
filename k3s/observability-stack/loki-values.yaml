deploymentMode: SingleBinary
loki:
  auth_enabled: false
  commonConfig:
    replication_factor: 1
  storage:
    type: filesystem # JuiceFS se presenta como un filesystem al pod
  schemaConfig:
    configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: filesystem
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
singleBinary:
  replicas: 1
  persistence:
    enabled: true
    storageClass: "juicefs-gcs-redis-canonica"
    size: 10Gi
    accessModes:
      - ReadWriteOnce # Adecuado para SingleBinary
  # ConfiguraciÃ³n de seguridad para permitir a Loki escribir en el volumen JuiceFS
  # El usuario por defecto de Loki en el chart es 10001
  podSecurityContext:
    fsGroup: 10001
  securityContext:
    runAsUser: 10001
    runAsGroup: 10001
  # ðŸ”§ OPTIMIZACIÃ“N DE RECURSOS - Reducir memoria de ~10GB a 1GB
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi

gateway:
  enabled: true
  # RECURSOS DEL GATEWAY
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

read:
  replicas: 0
write:
  replicas: 0
backend:
  replicas: 0

# CONFIGURACIÃ“N DE CACHE - Reducir significativamente el uso de memoria
chunksCache:
  enabled: true
  # Reducir drÃ¡sticamente el cache de chunks de ~10GB a 512MB
  allocatedMemory: 512 # MB
  writeDedupeCache:
    maxSize: 64m

resultsCache:
  enabled: true
  allocatedMemory: 256 # 256MB para cache de resultados

# Opcional: Habilitar serviceMonitor si usas Prometheus Operator
monitoring:
  selfMonitoring:
    enabled: false
    grafanaAgent:
      installOperator: false
  serviceMonitor:
    enabled: true # Para que Prometheus pueda scrapear Loki
  lokiCanary:
    enabled: false